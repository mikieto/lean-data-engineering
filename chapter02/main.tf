# chapter02/main.tf
# Example Infrastructure as Code (IaC) generated by AI for a Phased Data Mesh on Lakehouse
# This is a simplified representation to illustrate concepts.

# Configure the AWS Provider
provider "aws" {
  region = var.aws_region # Use a variable for the region for flexibility
}

# Define the region variable
variable "aws_region" {
  description = "The AWS region to deploy resources into."
  type        = string
  default     = "us-east-1" # Default region, can be overridden by environment variable or CLI
}

# --- AWS S3 Bucket for Bronze Layer (L1: Logs) ---
resource "aws_s3_bucket" "bronze_layer_bucket" {
  bucket = "customer-360-bronze-logs-example"
  # acl = "private" # Removed: 'acl' argument is deprecated. S3 bucket ownership controls handle this now.

  tags = {
    Layer      = "L1_Logs"
    Initiative = "Customer360View"
    Environment = "dev"
  }
}

# --- AWS Glue Catalog Database for Silver Layer (L2: Knowledge - metadata) ---
resource "aws_glue_catalog_database" "silver_layer_db" {
  name = "customer_360-silver-db" # Hyphenated name for consistency, though underscore also works
  description = "Metadata for Silver layer (conformed data) for Customer 360-degree view."

  tags = {
    Layer      = "L2_Knowledge"
    Initiative = "Customer360View"
    Environment = "dev"
  }
}

# --- Data Product - Marketing Domain (Example for Data Mesh L3/L2) ---
# This would typically be defined by the Marketing domain team.

resource "aws_s3_bucket" "marketing_customer_data_product_bucket" {
  bucket = "customer-360-marketing-silver-example"
  # acl = "private" # Removed: 'acl' argument is deprecated.

  tags = {
    Layer       = "L2_Knowledge_DataProduct"
    Initiative  = "Customer360View"
    Domain      = "Marketing"
    DataProduct = "CustomerBehavior"
    Environment = "dev"
  }
}

resource "aws_glue_catalog_table" "marketing_customer_behavior_table" {
  name          = "marketing_customer_behavior"
  database_name = aws_glue_catalog_database.silver_layer_db.name
  table_type    = "EXTERNAL_TABLE"

  parameters = {
    "classification" = "parquet"
    "EXTERNAL"       = "TRUE"
  }

  storage_descriptor {
    location      = "s3://${aws_s3_bucket.marketing_customer_data_product_bucket.bucket}/"
    input_format  = "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat"
    output_format = "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat"
    ser_de_info { # Corrected from 'serde_info' to 'ser_de_info'
      name                = "ParquetHiveSerDe"
      serialization_library = "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe"
    }

    columns {
      name = "customer_id"
      type = "string"
    }
    columns {
      name = "behavior_event"
      type = "string"
    }
    columns {
      name = "event_timestamp"
      type = "timestamp"
    }
  }
  # tags = { ... } # Removed: 'tags' argument is not supported directly on aws_glue_catalog_table
}

# --- Example Policy (L3: Legislation - simplified) ---
# This would typically be managed by OPA/Rego or IAM policies.
# This example shows a simple S3 bucket policy to illustrate L3 concept.
resource "aws_s3_bucket_policy" "marketing_customer_data_product_policy" {
  bucket = aws_s3_bucket.marketing_customer_data_product_bucket.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          # Dynamically retrieve the current AWS account ID and grant access to the root user (representing the account)
          # This is for testing purposes. In production, specify a narrow IAM Role ARN.
          AWS = "arn:aws:iam::${data.aws_caller_identity.current.account_id}:root"
        }
        Action = [
          "s3:GetObject"
        ]
        Resource = [
          "${aws_s3_bucket.marketing_customer_data_product_bucket.arn}/*"
        ]
        Condition = {
          "StringEquals" : {
            "s3:ExistingObjectTag/AccessLevel" : "aggregated"
          }
        }
      }
    ]
  })
}

# Data source to dynamically retrieve the current AWS account ID
data "aws_caller_identity" "current" {}
